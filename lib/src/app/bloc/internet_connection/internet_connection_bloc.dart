import 'dart:async';import 'package:bloc/bloc.dart';import 'package:equatable/equatable.dart';import 'package:flutter/foundation.dart';import 'package:internet_connection_checker/internet_connection_checker.dart';part 'internet_connection_event.dart';part 'internet_connection_state.dart';class InternetConnectionBloc    extends Bloc<InternetConnectionEvent, InternetConnectionState> {  InternetConnectionBloc() : super(InternetConnectionInitial()) {    on<CheckConnection>(_checkConnection);  }  StreamSubscription? subscription;  _checkConnection(CheckConnection event, Emitter<InternetConnectionState> emit) async {    subscription?.cancel();    if (kIsWeb) {      emit(InternetConnected());    } else {      await emit.onEach(        InternetConnectionChecker().onStatusChange,        onData: (status) {          switch (status) {            case InternetConnectionStatus.connected:              emit(InternetConnected());              break;            case InternetConnectionStatus.disconnected:              emit(InternetDisconnected());              break;            default:              emit(InternetConnectionInitial());          }        },        onError: (error, stackTrace) {          emit(InternetConnectionError(error.toString()));        },      );    }  }  @override  Future<void> close() async {    subscription!.cancel();    return super.close();  }}